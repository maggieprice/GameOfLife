{"version":3,"sources":["Game.js","Rules.js","App.js","serviceWorker.js","index.js"],"names":["Cell","this","props","x","y","className","style","left","top","width","CELL_SIZE","height","React","Component","Game","state","cells","isRunning","interval","generation","handleClick","event","elemOffset","getElementOffset","offsetX","clientX","offsetY","clientY","Math","floor","cols","rows","board","setState","makeCells","runGame","runIteration","stopGame","timeoutHandler","window","clearTimeout","handleIntervalChange","target","value","handleClear","makeEmptyBoard","handleSeed","random","HEIGHT","WIDTH","rect","boardRef","getBoundingClientRect","doc","document","documentElement","pageXOffset","clientLeft","pageYOffset","clientTop","push","newBoard","neighbors","calculateNeighbors","setTimeout","dirs","i","length","dir","y1","x1","backgroundSize","onClick","ref","n","map","cell","key","onChange","Rules","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6RAOMA,G,6KACM,IAAD,EACUC,KAAKC,MAAdC,EADD,EACCA,EAAGC,EADJ,EACIA,EACX,OACE,yBACEC,UAAU,OACVC,MAAO,CACLC,KAAK,GAAD,OAXI,GAWaJ,EAAI,EAArB,MACJK,IAAI,GAAD,OAZK,GAYYJ,EAAI,EAArB,MACHK,MAAM,GAAD,OAAKC,GAAL,MACLC,OAAO,GAAD,OAAKD,GAAL,a,GAVGE,IAAMC,YAsNVC,E,kDApMb,aAAe,IAAD,8BACZ,gBAKFC,MAAQ,CACNC,MAAO,GACPC,WAAW,EACXC,SAAU,IACVC,WAAY,GAVA,EA4CdC,YAAc,SAACC,GACb,IAAMC,EAAa,EAAKC,mBAClBC,EAAUH,EAAMI,QAAUH,EAAWnB,EACrCuB,EAAUL,EAAMM,QAAUL,EAAWlB,EACrCD,EAAIyB,KAAKC,MAAML,EAtEP,IAuERpB,EAAIwB,KAAKC,MAAMH,EAvEP,IAwEVvB,GAAK,GAAKA,GAAK,EAAK2B,MAAQ1B,GAAK,GAAKA,GAAK,EAAK2B,OAClD,EAAKC,MAAM5B,GAAGD,IAAM,EAAK6B,MAAM5B,GAAGD,IAEpC,EAAK8B,SAAS,CAAEjB,MAAO,EAAKkB,eArDhB,EAuDdC,QAAU,WACR,EAAKF,SAAS,CAAEhB,WAAW,IAC3B,EAAKmB,gBAzDO,EA2DdC,SAAW,WACT,EAAKJ,SAAS,CAAEhB,WAAW,IACvB,EAAKqB,iBACPC,OAAOC,aAAa,EAAKF,gBACzB,EAAKA,eAAiB,OA/DZ,EA6HdG,qBAAuB,SAACpB,GACtB,EAAKY,SAAS,CAAEf,SAAUG,EAAMqB,OAAOC,SA9H3B,EAiIdC,YAAc,WACZ,EAAKZ,MAAQ,EAAKa,iBAClB,EAAKZ,SAAS,CAAEjB,MAAO,EAAKkB,YAAaf,WAAY,KAnIzC,EAsId2B,WAAa,WACX,IAAK,IAAI1C,EAAI,EAAGA,EAAI,EAAK2B,KAAM3B,IAC7B,IAAK,IAAID,EAAI,EAAGA,EAAI,EAAK2B,KAAM3B,IAC7B,EAAK6B,MAAM5B,GAAGD,GAAKyB,KAAKmB,UAAY,GAGxC,EAAKd,SAAS,CAAEjB,MAAO,EAAKkB,eA1I5B,EAAKH,KAAOiB,GACZ,EAAKlB,KAAOmB,GACZ,EAAKjB,MAAQ,EAAKa,iBAJN,E,6DAcZ,IADA,IAAIb,EAAQ,GACH5B,EAAI,EAAGA,EAAIH,KAAK8B,KAAM3B,IAAK,CAClC4B,EAAM5B,GAAK,GACX,IAAK,IAAID,EAAI,EAAGA,EAAIF,KAAK6B,KAAM3B,IAC7B6B,EAAM5B,GAAGD,IAAK,EAGlB,OAAO6B,I,yCAIP,IAAMkB,EAAOjD,KAAKkD,SAASC,wBACrBC,EAAMC,SAASC,gBACrB,MAAO,CACLpD,EAAG+C,EAAK3C,KAAOgC,OAAOiB,YAAcH,EAAII,WACxCrD,EAAG8C,EAAK1C,IAAM+B,OAAOmB,YAAcL,EAAIM,a,kCAMzC,IADA,IAAI3C,EAAQ,GACHZ,EAAI,EAAGA,EAAIH,KAAK8B,KAAM3B,IAC7B,IAAK,IAAID,EAAI,EAAGA,EAAIF,KAAK6B,KAAM3B,IACzBF,KAAK+B,MAAM5B,GAAGD,IAChBa,EAAM4C,KAAK,CAAEzD,IAAGC,MAItB,OAAOY,I,qCA2BP,IAFc,IAAD,OACT6C,EAAW5D,KAAK4C,iBACXzC,EAAI,EAAGA,EAAIH,KAAK8B,KAAM3B,IAC7B,IAAK,IAAID,EAAI,EAAGA,EAAIF,KAAK6B,KAAM3B,IAAK,CAClC,IAAI2D,EAAY7D,KAAK8D,mBAAmB9D,KAAK+B,MAAO7B,EAAGC,GACnDH,KAAK+B,MAAM5B,GAAGD,GAEd0D,EAASzD,GAAGD,GADI,IAAd2D,GAAiC,IAAdA,EAMlB7D,KAAK+B,MAAM5B,GAAGD,IAAoB,IAAd2D,IACvBD,EAASzD,GAAGD,IAAK,GAKzBF,KAAK+B,MAAQ6B,EACb5D,KAAKgC,SAAS,CACZjB,MAAOf,KAAKiC,YACZf,WAAYlB,KAAKc,MAAMI,WAAa,IAEtClB,KAAKqC,eAAiBC,OAAOyB,YAAW,WACtC,EAAK5B,iBACJnC,KAAKc,MAAMG,Y,yCAGGc,EAAO7B,EAAGC,GAY3B,IAXA,IAAI0D,EAAY,EACVG,EAAO,CACX,EAAE,GAAI,GACN,EAAE,EAAG,GACL,EAAE,EAAG,GACL,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,GAAI,GACL,CAAC,GAAI,IAEEC,EAAI,EAAGA,EAAID,EAAKE,OAAQD,IAAK,CACpC,IAAME,EAAMH,EAAKC,GACbG,EAAKjE,EAAIgE,EAAI,GACbE,EAAKnE,EAAIiE,EAAI,GAGfE,GAAM,GACNA,EAAKrE,KAAK6B,MACVuC,GAAM,GACNA,EAAKpE,KAAK8B,MACVC,EAAMqC,GAAIC,IAEVR,IAIJ,OAAOA,I,+BAqBC,IAAD,SACgC7D,KAAKc,MAApCC,EADD,EACCA,MAAiBC,GADlB,EACQC,SADR,EACkBD,WACzB,OACE,6BACE,yBACEZ,UAAU,QACVC,MAAO,CACLG,MA3KE,IA4KFE,OA3KG,IA4KH4D,eAAe,GAAD,OA9KR,GA8KQ,cA9KR,GA8KQ,OAEhBC,QAASvE,KAAKmB,YACdqD,IAAK,SAACC,GACJ,EAAKvB,SAAWuB,IAGjB1D,EAAM2D,KAAI,SAACC,GAAD,OACT,kBAAC,EAAD,CAAMzE,EAAGyE,EAAKzE,EAAGC,EAAGwE,EAAKxE,EAAGyE,IAAG,UAAKD,EAAKzE,EAAV,YAAeyE,EAAKxE,SAGvD,yBAAKC,UAAU,0BACb,4CAAkBJ,KAAKc,MAAMI,aAE/B,yBAAKd,UAAU,YAAf,eAEE,2BACEA,UAAU,WACVsC,MAAO1C,KAAKc,MAAMG,SAClB4D,SAAU7E,KAAKwC,uBALnB,OAQGxB,EACC,4BAAQZ,UAAU,SAASmE,QAASvE,KAAKoC,UAAzC,QAIA,4BAAQhC,UAAU,SAASmE,QAASvE,KAAKkC,SAAzC,OAIF,4BAAQ9B,UAAU,SAASmE,QAASvE,KAAK6C,YAAzC,QAGA,4BAAQzC,UAAU,SAASmE,QAASvE,KAAK2C,aACtC,IADH,qB,GA3LShC,IAAMC,WCQVkE,MA9Bf,WACE,OACE,yBAAK1E,UAAU,aACb,8DACA,wBAAIA,UAAU,oBAAd,uHAE8C,IAC3C,yCAHH,kCAKA,4BACE,mHAIA,8HAKF,8GAEW,IAEP,mFCRK2E,MAZf,WACE,OACE,yBAAK3E,UAAU,OACb,4BAAQA,UAAU,cAAlB,4FAIA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCDc4E,QACW,cAA7B1C,OAAO2C,SAASC,UAEe,UAA7B5C,OAAO2C,SAASC,UAEhB5C,OAAO2C,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFjC,SAASkC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d0774d97.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Game.css\";\n\nconst CELL_SIZE = 20;\nconst WIDTH = 800;\nconst HEIGHT = 600;\n\nclass Cell extends React.Component {\n  render() {\n    const { x, y } = this.props;\n    return (\n      <div\n        className=\"Cell\"\n        style={{\n          left: `${CELL_SIZE * x + 1}px`,\n          top: `${CELL_SIZE * y + 1}px`,\n          width: `${CELL_SIZE - 1}px`,\n          height: `${CELL_SIZE - 1}px`,\n        }}\n      />\n    );\n  }\n}\n\nclass Game extends React.Component {\n  constructor() {\n    super();\n    this.rows = HEIGHT / CELL_SIZE;\n    this.cols = WIDTH / CELL_SIZE;\n    this.board = this.makeEmptyBoard();\n  }\n  state = {\n    cells: [],\n    isRunning: false,\n    interval: 100,\n    generation: 0,\n  };\n  makeEmptyBoard() {\n    let board = [];\n    for (let y = 0; y < this.rows; y++) {\n      board[y] = [];\n      for (let x = 0; x < this.cols; x++) {\n        board[y][x] = false;\n      }\n    }\n    return board;\n  }\n\n  getElementOffset() {\n    const rect = this.boardRef.getBoundingClientRect();\n    const doc = document.documentElement;\n    return {\n      x: rect.left + window.pageXOffset - doc.clientLeft,\n      y: rect.top + window.pageYOffset - doc.clientTop,\n    };\n  }\n\n  makeCells() {\n    let cells = [];\n    for (let y = 0; y < this.rows; y++) {\n      for (let x = 0; x < this.cols; x++) {\n        if (this.board[y][x]) {\n          cells.push({ x, y });\n        }\n      }\n    }\n    return cells;\n  }\n\n  handleClick = (event) => {\n    const elemOffset = this.getElementOffset();\n    const offsetX = event.clientX - elemOffset.x;\n    const offsetY = event.clientY - elemOffset.y;\n    const x = Math.floor(offsetX / CELL_SIZE);\n    const y = Math.floor(offsetY / CELL_SIZE);\n    if (x >= 0 && x <= this.cols && y >= 0 && y <= this.rows) {\n      this.board[y][x] = !this.board[y][x];\n    }\n    this.setState({ cells: this.makeCells() });\n  };\n  runGame = () => {\n    this.setState({ isRunning: true });\n    this.runIteration();\n  };\n  stopGame = () => {\n    this.setState({ isRunning: false });\n    if (this.timeoutHandler) {\n      window.clearTimeout(this.timeoutHandler);\n      this.timeoutHandler = null;\n    }\n  };\n  runIteration() {\n    let newBoard = this.makeEmptyBoard();\n    for (let y = 0; y < this.rows; y++) {\n      for (let x = 0; x < this.cols; x++) {\n        let neighbors = this.calculateNeighbors(this.board, x, y);\n        if (this.board[y][x]) {\n          if (neighbors === 2 || neighbors === 3) {\n            newBoard[y][x] = true;\n          } else {\n            newBoard[y][x] = false;\n          }\n        } else {\n          if (!this.board[y][x] && neighbors === 3) {\n            newBoard[y][x] = true;\n          }\n        }\n      }\n    }\n    this.board = newBoard;\n    this.setState({\n      cells: this.makeCells(),\n      generation: this.state.generation + 1,\n    });\n    this.timeoutHandler = window.setTimeout(() => {\n      this.runIteration();\n    }, this.state.interval);\n  }\n\n  calculateNeighbors(board, x, y) {\n    let neighbors = 0;\n    const dirs = [\n      [-1, -1],\n      [-1, 0],\n      [-1, 1],\n      [0, 1],\n      [1, 1],\n      [1, 0],\n      [1, -1],\n      [0, -1],\n    ];\n    for (let i = 0; i < dirs.length; i++) {\n      const dir = dirs[i];\n      let y1 = y + dir[0];\n      let x1 = x + dir[1];\n\n      if (\n        x1 >= 0 &&\n        x1 < this.cols &&\n        y1 >= 0 &&\n        y1 < this.rows &&\n        board[y1][x1]\n      ) {\n        neighbors++;\n      }\n    }\n\n    return neighbors;\n  }\n\n  handleIntervalChange = (event) => {\n    this.setState({ interval: event.target.value });\n  };\n\n  handleClear = () => {\n    this.board = this.makeEmptyBoard();\n    this.setState({ cells: this.makeCells(), generation: 0 });\n  };\n\n  handleSeed = () => {\n    for (let y = 0; y < this.rows; y++) {\n      for (let x = 0; x < this.cols; x++) {\n        this.board[y][x] = Math.random() >= 0.5;\n      }\n    }\n    this.setState({ cells: this.makeCells() });\n  };\n\n  render() {\n    const { cells, interval, isRunning } = this.state;\n    return (\n      <div>\n        <div\n          className=\"Board\"\n          style={{\n            width: WIDTH,\n            height: HEIGHT,\n            backgroundSize: `${CELL_SIZE}px ${CELL_SIZE}px`,\n          }}\n          onClick={this.handleClick}\n          ref={(n) => {\n            this.boardRef = n;\n          }}\n        >\n          {cells.map((cell) => (\n            <Cell x={cell.x} y={cell.y} key={`${cell.x},${cell.y}`} />\n          ))}\n        </div>\n        <div className=\"selected-cells-display\">\n          <h3> Generation: {this.state.generation}</h3>\n        </div>\n        <div className=\"controls\">\n          Update every\n          <input\n            className=\"controls\"\n            value={this.state.interval}\n            onChange={this.handleIntervalChange}\n          />\n          msec\n          {isRunning ? (\n            <button className=\"button\" onClick={this.stopGame}>\n              Stop\n            </button>\n          ) : (\n            <button className=\"button\" onClick={this.runGame}>\n              Run\n            </button>\n          )}\n          <button className=\"button\" onClick={this.handleSeed}>\n            Seed\n          </button>\n          <button className=\"button\" onClick={this.handleClear}>\n            {\" \"}\n            Clear Board\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","import React from \"react\";\n\nfunction Rules() {\n  return (\n    <div className=\"rules-div\">\n      <h1>Rules of Conway's Game of Life</h1>\n      <h2 className=\"rules-descriptor\">\n        In the Game of Life, these rules examine each cell of the grid. For each\n        cell, it counts that cell's eight neighbors{\" \"}\n        {\"(up, down, left, right, and diagonals)\"}, and then act on that result.\n      </h2>\n      <h3>\n        <ul>\n          If the cell is alive and has 2 or 3 neighbors, then it remains alive.\n          Else it dies.\n        </ul>\n        <ul>\n          If the cell is dead and has exactly 3 neighbors, then it comes to\n          life. Else if remains dead.\n        </ul>\n      </h3>\n      <h4>\n        Note: cells that are off the edge of the grid are typically assumed to\n        be dead.{\" \"}\n        {\n          \"(In other cases, people sometimes code it up to wrap around to the far side.)\"\n        }\n      </h4>\n    </div>\n  );\n}\n\nexport default Rules;\n","import React from \"react\";\nimport \"./App.css\";\nimport Game from \"./Game.js\";\nimport Rules from \"./Rules.js\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        Welcome to Maggie's Conway's Game of Life using react and javascript\n        build week project!\n      </header>\n      <Rules />\n      <Game />\n    </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}